<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xjd.note.dao.mapper.UserDoMapper" >
  <resultMap id="BaseResultMap" type="com.xjd.note.dao.model.UserDo" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="enabled" property="enabled" jdbcType="BIT" />
    <result column="locked" property="locked" jdbcType="BIT" />
    <result column="pwd_error_times" property="pwdErrorTimes" jdbcType="DECIMAL" />
    <result column="last_login_timestamp" property="lastLoginTimestamp" jdbcType="TIMESTAMP" />
    <result column="last_login_ip" property="lastLoginIp" jdbcType="VARCHAR" />
    <result column="last_modify_timestamp" property="lastModifyTimestamp" jdbcType="TIMESTAMP" />
    <result column="create_timestamp" property="createTimestamp" jdbcType="TIMESTAMP" />
    <result column="reset_pwd_token" property="resetPwdToken" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, username, email, password, enabled, locked, pwd_error_times, last_login_timestamp, 
    last_login_ip, last_modify_timestamp, create_timestamp, reset_pwd_token
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.xjd.note.dao.model.UserDoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from users
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from users
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from users
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.xjd.note.dao.model.UserDoExample" >
    delete from users
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xjd.note.dao.model.UserDo" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into users (username, email, password, 
      enabled, locked, pwd_error_times, 
      last_login_timestamp, last_login_ip, last_modify_timestamp, 
      create_timestamp, reset_pwd_token)
    values (#{username,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{enabled,jdbcType=BIT}, #{locked,jdbcType=BIT}, #{pwdErrorTimes,jdbcType=DECIMAL}, 
      #{lastLoginTimestamp,jdbcType=TIMESTAMP}, #{lastLoginIp,jdbcType=VARCHAR}, #{lastModifyTimestamp,jdbcType=TIMESTAMP}, 
      #{createTimestamp,jdbcType=TIMESTAMP}, #{resetPwdToken,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xjd.note.dao.model.UserDo" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into users
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="username != null" >
        username,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="enabled != null" >
        enabled,
      </if>
      <if test="locked != null" >
        locked,
      </if>
      <if test="pwdErrorTimes != null" >
        pwd_error_times,
      </if>
      <if test="lastLoginTimestamp != null" >
        last_login_timestamp,
      </if>
      <if test="lastLoginIp != null" >
        last_login_ip,
      </if>
      <if test="lastModifyTimestamp != null" >
        last_modify_timestamp,
      </if>
      <if test="createTimestamp != null" >
        create_timestamp,
      </if>
      <if test="resetPwdToken != null" >
        reset_pwd_token,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="enabled != null" >
        #{enabled,jdbcType=BIT},
      </if>
      <if test="locked != null" >
        #{locked,jdbcType=BIT},
      </if>
      <if test="pwdErrorTimes != null" >
        #{pwdErrorTimes,jdbcType=DECIMAL},
      </if>
      <if test="lastLoginTimestamp != null" >
        #{lastLoginTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginIp != null" >
        #{lastLoginIp,jdbcType=VARCHAR},
      </if>
      <if test="lastModifyTimestamp != null" >
        #{lastModifyTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="createTimestamp != null" >
        #{createTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="resetPwdToken != null" >
        #{resetPwdToken,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xjd.note.dao.model.UserDoExample" resultType="java.lang.Integer" >
    select count(*) from users
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update users
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.username != null" >
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null" >
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null" >
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.enabled != null" >
        enabled = #{record.enabled,jdbcType=BIT},
      </if>
      <if test="record.locked != null" >
        locked = #{record.locked,jdbcType=BIT},
      </if>
      <if test="record.pwdErrorTimes != null" >
        pwd_error_times = #{record.pwdErrorTimes,jdbcType=DECIMAL},
      </if>
      <if test="record.lastLoginTimestamp != null" >
        last_login_timestamp = #{record.lastLoginTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastLoginIp != null" >
        last_login_ip = #{record.lastLoginIp,jdbcType=VARCHAR},
      </if>
      <if test="record.lastModifyTimestamp != null" >
        last_modify_timestamp = #{record.lastModifyTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTimestamp != null" >
        create_timestamp = #{record.createTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="record.resetPwdToken != null" >
        reset_pwd_token = #{record.resetPwdToken,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update users
    set id = #{record.id,jdbcType=BIGINT},
      username = #{record.username,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      enabled = #{record.enabled,jdbcType=BIT},
      locked = #{record.locked,jdbcType=BIT},
      pwd_error_times = #{record.pwdErrorTimes,jdbcType=DECIMAL},
      last_login_timestamp = #{record.lastLoginTimestamp,jdbcType=TIMESTAMP},
      last_login_ip = #{record.lastLoginIp,jdbcType=VARCHAR},
      last_modify_timestamp = #{record.lastModifyTimestamp,jdbcType=TIMESTAMP},
      create_timestamp = #{record.createTimestamp,jdbcType=TIMESTAMP},
      reset_pwd_token = #{record.resetPwdToken,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xjd.note.dao.model.UserDo" >
    update users
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="enabled != null" >
        enabled = #{enabled,jdbcType=BIT},
      </if>
      <if test="locked != null" >
        locked = #{locked,jdbcType=BIT},
      </if>
      <if test="pwdErrorTimes != null" >
        pwd_error_times = #{pwdErrorTimes,jdbcType=DECIMAL},
      </if>
      <if test="lastLoginTimestamp != null" >
        last_login_timestamp = #{lastLoginTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginIp != null" >
        last_login_ip = #{lastLoginIp,jdbcType=VARCHAR},
      </if>
      <if test="lastModifyTimestamp != null" >
        last_modify_timestamp = #{lastModifyTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="createTimestamp != null" >
        create_timestamp = #{createTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="resetPwdToken != null" >
        reset_pwd_token = #{resetPwdToken,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xjd.note.dao.model.UserDo" >
    update users
    set username = #{username,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      enabled = #{enabled,jdbcType=BIT},
      locked = #{locked,jdbcType=BIT},
      pwd_error_times = #{pwdErrorTimes,jdbcType=DECIMAL},
      last_login_timestamp = #{lastLoginTimestamp,jdbcType=TIMESTAMP},
      last_login_ip = #{lastLoginIp,jdbcType=VARCHAR},
      last_modify_timestamp = #{lastModifyTimestamp,jdbcType=TIMESTAMP},
      create_timestamp = #{createTimestamp,jdbcType=TIMESTAMP},
      reset_pwd_token = #{resetPwdToken,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>